
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 13 20:58:43 CST 2011
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import java.util.*;
import Absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 13 20:58:43 CST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\006\000\002\002\005\000\002\002\006\000" +
    "\002\002\010\000\002\002\006\000\002\002\010\000\002" +
    "\002\006\000\002\002\012\000\002\002\003\000\002\002" +
    "\007\000\002\020\003\000\002\006\002\000\002\006\003" +
    "\000\002\005\003\000\002\005\005\000\002\004\002\000" +
    "\002\004\003\000\002\003\003\000\002\003\005\000\002" +
    "\010\002\000\002\010\003\000\002\007\005\000\002\007" +
    "\007\000\002\011\003\000\002\011\005\000\002\011\006" +
    "\000\002\011\006\000\002\013\002\000\002\013\003\000" +
    "\002\012\003\000\002\012\004\000\002\014\006\000\002" +
    "\014\006\000\002\014\010\000\002\014\011\000\002\014" +
    "\013\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\017\002\000\002\017\003\000\002\016\005\000" +
    "\002\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\030\004\011\005\006\006\010\010\021\011" +
    "\016\020\013\026\017\051\004\055\014\056\012\057\005" +
    "\001\002\000\030\004\011\005\006\006\010\010\021\011" +
    "\016\020\013\026\017\051\004\055\014\056\012\057\005" +
    "\001\002\000\070\002\uffff\007\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\021\uffff\022\uffff\023\uffff\027\uffff" +
    "\031\uffff\033\uffff\034\uffff\035\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\053\uffff\054\uffff\001\002\000\030\004\011\005" +
    "\006\006\010\010\021\011\016\020\013\026\017\051\004" +
    "\055\014\056\012\057\005\001\002\000\102\002\uffd7\007" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\026\161\027\uffd7\030\157\031\uffd7\032" +
    "\160\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7\001\002\000\004" +
    "\055\014\001\002\000\070\002\ufffe\007\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\027\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\053\ufffe\054\ufffe\001\002\000\070\002" +
    "\000\007\000\012\000\013\000\014\000\015\000\016\000" +
    "\021\000\022\000\023\000\027\000\031\000\033\000\034" +
    "\000\035\000\040\000\041\000\042\000\043\000\044\000" +
    "\045\000\046\000\047\000\050\000\051\000\053\000\054" +
    "\000\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\104\002\uffe4\007\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\021\uffe4\022\uffe4\023\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\053\uffe4\054\uffe4\001\002\000\034\002\142\040" +
    "\042\041\030\042\035\043\033\044\041\045\036\046\037" +
    "\047\032\050\034\051\027\053\040\054\031\001\002\000" +
    "\012\012\uffd3\014\072\015\067\016\073\001\002\000\032" +
    "\004\011\005\006\006\010\010\021\011\016\020\013\026" +
    "\017\027\uffe3\051\004\055\014\056\012\057\005\001\002" +
    "\000\076\002\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\021\ufffd\022\ufffd\023\ufffd\027\ufffd\031\ufffd" +
    "\032\022\033\ufffd\034\ufffd\035\ufffd\036\024\037\023\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\053\ufffd\054\ufffd\001\002\000" +
    "\070\002\uffe6\007\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\031\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053" +
    "\uffe6\054\uffe6\001\002\000\030\004\011\005\006\006\010" +
    "\010\021\011\016\020\013\026\017\051\004\055\014\056" +
    "\012\057\005\001\002\000\030\004\011\005\006\006\010" +
    "\010\021\011\016\020\013\026\017\051\004\055\014\056" +
    "\012\057\005\001\002\000\004\055\014\001\002\000\076" +
    "\002\uffd6\007\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\053\uffd6\054\uffd6\001\002\000\070\002" +
    "\uffef\007\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\021\uffef\022\uffef\023\uffef\027\uffef\031\uffef\033\uffef\034" +
    "\uffef\035\uffef\040\042\041\030\042\035\043\033\044\041" +
    "\045\036\046\037\047\032\050\034\051\027\053\040\054" +
    "\031\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\070\002\ufff0\007\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0\023\ufff0\027" +
    "\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\030" +
    "\042\035\043\033\044\041\045\036\046\037\047\032\050" +
    "\034\051\027\053\040\054\031\001\002\000\054\002\ufff5" +
    "\007\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\027\ufff5\031\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\040\ufff5\041\ufff5\050\034\051\027\053\040\054" +
    "\031\001\002\000\070\002\ufff9\007\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\021\ufff9\022\ufff9\023\ufff9\027" +
    "\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\054\ufff9\001\002\000\054\002\ufff3" +
    "\007\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\027\ufff3\031\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\040\ufff3\041\ufff3\050\034\051\027\053\040\054" +
    "\031\001\002\000\054\002\ufff4\007\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4\027" +
    "\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\041\ufff4" +
    "\050\034\051\027\053\040\054\031\001\002\000\054\002" +
    "\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\027\ufff7\031\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\040\ufff7\041\ufff7\050\034\051\027\053\040" +
    "\054\031\001\002\000\070\002\ufffb\007\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\027\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\053\040\054\031\001\002\000\054\002" +
    "\ufff6\007\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\027\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\040\ufff6\041\ufff6\050\034\051\027\053\040" +
    "\054\031\001\002\000\054\002\ufff2\007\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\027\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\040\ufff2\041" +
    "\ufff2\050\034\051\027\053\040\054\031\001\002\000\070" +
    "\002\ufff8\007\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\027\ufff8\031\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8" +
    "\054\ufff8\001\002\000\070\002\ufff1\007\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\027\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041" +
    "\ufff1\042\035\043\033\044\041\045\036\046\037\047\032" +
    "\050\034\051\027\053\040\054\031\001\002\000\070\002" +
    "\ufffa\007\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\027\ufffa\031\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\053\040\054" +
    "\031\001\002\000\034\033\060\040\042\041\030\042\035" +
    "\043\033\044\041\045\036\046\037\047\032\050\034\051" +
    "\027\053\040\054\031\001\002\000\076\002\uffd5\007\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\053\uffd5\054\uffd5\001\002\000\004\027\066\001\002\000" +
    "\006\013\uffe2\027\uffe2\001\002\000\040\013\uffe1\027\uffe1" +
    "\034\064\040\042\041\030\042\035\043\033\044\041\045" +
    "\036\046\037\047\032\050\034\051\027\053\040\054\031" +
    "\001\002\000\030\004\011\005\006\006\010\010\021\011" +
    "\016\020\013\026\017\051\004\055\014\056\012\057\005" +
    "\001\002\000\006\013\uffe0\027\uffe0\001\002\000\070\002" +
    "\uffed\007\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\021\uffed\022\uffed\023\uffed\027\uffed\031\uffed\033\uffed\034" +
    "\uffed\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\053\uffed\054" +
    "\uffed\001\002\000\004\055\014\001\002\000\004\012\uffd2" +
    "\001\002\000\004\012\130\001\002\000\004\055\014\001" +
    "\002\000\004\055\014\001\002\000\012\012\uffd1\014\072" +
    "\015\067\016\073\001\002\000\004\012\uffd0\001\002\000" +
    "\004\042\077\001\002\000\010\017\103\030\101\055\014" +
    "\001\002\000\012\012\uffca\014\uffca\015\uffca\016\uffca\001" +
    "\002\000\006\031\uffc7\055\014\001\002\000\012\012\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\001\002\000\004\024\104\001" +
    "\002\000\004\055\014\001\002\000\012\012\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\001\002\000\004\025\112\001\002\000" +
    "\006\027\uffc6\031\uffc6\001\002\000\004\031\111\001\002" +
    "\000\012\012\uffc9\014\uffc9\015\uffc9\016\uffc9\001\002\000" +
    "\004\055\014\001\002\000\010\027\uffc5\031\uffc5\035\114" +
    "\001\002\000\004\055\014\001\002\000\006\027\uffc4\031" +
    "\uffc4\001\002\000\004\026\117\001\002\000\006\027\uffc7" +
    "\055\014\001\002\000\004\027\121\001\002\000\006\025" +
    "\123\042\122\001\002\000\030\004\011\005\006\006\010" +
    "\010\021\011\016\020\013\026\017\051\004\055\014\056" +
    "\012\057\005\001\002\000\004\055\014\001\002\000\004" +
    "\042\125\001\002\000\030\004\011\005\006\006\010\010" +
    "\021\011\016\020\013\026\017\051\004\055\014\056\012" +
    "\057\005\001\002\000\042\012\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\040\042\041\030\042\035\043\033\044\041\045\036" +
    "\046\037\047\032\050\034\051\027\053\040\054\031\001" +
    "\002\000\042\012\uffcc\014\uffcc\015\uffcc\016\uffcc\040\042" +
    "\041\030\042\035\043\033\044\041\045\036\046\037\047" +
    "\032\050\034\051\027\053\040\054\031\001\002\000\032" +
    "\004\011\005\006\006\010\010\021\011\016\013\uffe3\020" +
    "\013\026\017\051\004\055\014\056\012\057\005\001\002" +
    "\000\004\013\132\001\002\000\070\002\uffe5\007\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\001\002\000" +
    "\006\025\134\037\135\001\002\000\004\055\014\001\002" +
    "\000\030\004\011\005\006\006\010\010\021\011\016\020" +
    "\013\026\017\051\004\055\014\056\012\057\005\001\002" +
    "\000\042\012\uffce\014\uffce\015\uffce\016\uffce\040\042\041" +
    "\030\042\035\043\033\044\041\045\036\046\037\047\032" +
    "\050\034\051\027\053\040\054\031\001\002\000\004\037" +
    "\140\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\042\012\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\040\042\041\030\042\035\043\033\044\041\045\036\046" +
    "\037\047\032\050\034\051\027\053\040\054\031\001\002" +
    "\000\004\002\001\001\002\000\034\021\144\040\042\041" +
    "\030\042\035\043\033\044\041\045\036\046\037\047\032" +
    "\050\034\051\027\053\040\054\031\001\002\000\030\004" +
    "\011\005\006\006\010\010\021\011\016\020\013\026\017" +
    "\051\004\055\014\056\012\057\005\001\002\000\070\002" +
    "\uffea\007\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\021\uffea\022\146\023\uffea\027\uffea\031\uffea\033\uffea\034" +
    "\uffea\035\uffea\040\042\041\030\042\035\043\033\044\041" +
    "\045\036\046\037\047\032\050\034\051\027\053\040\054" +
    "\031\001\002\000\030\004\011\005\006\006\010\010\021" +
    "\011\016\020\013\026\017\051\004\055\014\056\012\057" +
    "\005\001\002\000\070\002\uffe9\007\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\021\uffe9\022\uffe9\023\uffe9\027" +
    "\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\040\042\041\030" +
    "\042\035\043\033\044\041\045\036\046\037\047\032\050" +
    "\034\051\027\053\040\054\031\001\002\000\004\037\151" +
    "\001\002\000\030\004\011\005\006\006\010\010\021\011" +
    "\016\020\013\026\017\051\004\055\014\056\012\057\005" +
    "\001\002\000\034\007\153\040\042\041\030\042\035\043" +
    "\033\044\041\045\036\046\037\047\032\050\034\051\027" +
    "\053\040\054\031\001\002\000\030\004\011\005\006\006" +
    "\010\010\021\011\016\020\013\026\017\051\004\055\014" +
    "\056\012\057\005\001\002\000\034\023\155\040\042\041" +
    "\030\042\035\043\033\044\041\045\036\046\037\047\032" +
    "\050\034\051\027\053\040\054\031\001\002\000\030\004" +
    "\011\005\006\006\010\010\021\011\016\020\013\026\017" +
    "\051\004\055\014\056\012\057\005\001\002\000\070\002" +
    "\uffe7\007\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\027\uffe7\031\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\040\042\041\030\042\035\043\033\044\041" +
    "\045\036\046\037\047\032\050\034\051\027\053\040\054" +
    "\031\001\002\000\006\031\uffdb\055\014\001\002\000\030" +
    "\004\011\005\006\006\010\010\021\011\016\020\013\026" +
    "\017\051\004\055\014\056\012\057\005\001\002\000\032" +
    "\004\011\005\006\006\010\010\021\011\016\020\013\026" +
    "\017\027\uffdf\051\004\055\014\056\012\057\005\001\002" +
    "\000\004\027\uffde\001\002\000\004\027\167\001\002\000" +
    "\036\027\uffdd\035\165\040\042\041\030\042\035\043\033" +
    "\044\041\045\036\046\037\047\032\050\034\051\027\053" +
    "\040\054\031\001\002\000\030\004\011\005\006\006\010" +
    "\010\021\011\016\020\013\026\017\051\004\055\014\056" +
    "\012\057\005\001\002\000\004\027\uffdc\001\002\000\070" +
    "\002\uffee\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\021\uffee\022\uffee\023\uffee\027\uffee\031\uffee\033\uffee" +
    "\034\uffee\035\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\053\uffee" +
    "\054\uffee\001\002\000\034\033\171\040\042\041\030\042" +
    "\035\043\033\044\041\045\036\046\037\047\032\050\034" +
    "\051\027\053\040\054\031\001\002\000\100\002\uffd4\007" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\172\027\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\053\uffd4\054\uffd4\001\002\000\030\004\011" +
    "\005\006\006\010\010\021\011\016\020\013\026\017\051" +
    "\004\055\014\056\012\057\005\001\002\000\070\002\uffeb" +
    "\007\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\027\uffeb\031\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\040\042\041\030\042\035\043\033\044\041\045" +
    "\036\046\037\047\032\050\034\051\027\053\040\054\031" +
    "\001\002\000\004\042\200\001\002\000\004\031\177\001" +
    "\002\000\004\031\uffda\001\002\000\070\002\uffec\007\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\021\uffec\022" +
    "\uffec\023\uffec\027\uffec\031\uffec\033\uffec\034\uffec\035\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\053\uffec\054\uffec\001\002" +
    "\000\030\004\011\005\006\006\010\010\021\011\016\020" +
    "\013\026\017\051\004\055\014\056\012\057\005\001\002" +
    "\000\036\031\uffd9\035\202\040\042\041\030\042\035\043" +
    "\033\044\041\045\036\046\037\047\032\050\034\051\027" +
    "\053\040\054\031\001\002\000\004\055\014\001\002\000" +
    "\004\031\uffd8\001\002\000\034\023\205\040\042\041\030" +
    "\042\035\043\033\044\041\045\036\046\037\047\032\050" +
    "\034\051\027\053\040\054\031\001\002\000\030\004\011" +
    "\005\006\006\010\010\021\011\016\020\013\026\017\051" +
    "\004\055\014\056\012\057\005\001\002\000\070\002\uffe8" +
    "\007\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\027\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\040\042\041\030\042\035\043\033\044\041\045" +
    "\036\046\037\047\032\050\034\051\027\053\040\054\031" +
    "\001\002\000\070\002\ufffc\007\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\021\ufffc\022\ufffc\023\ufffc\027\ufffc" +
    "\031\ufffc\033\ufffc\034\ufffc\035\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\053\ufffc\054\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\010\002\014\011\017\020\006\001\001\000" +
    "\010\002\206\011\017\020\006\001\001\000\002\001\001" +
    "\000\010\002\203\011\017\020\006\001\001\000\002\001" +
    "\001\000\004\020\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\142\011\017\020\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\067\013\070" +
    "\014\073\001\001\000\014\002\062\005\061\006\060\011" +
    "\017\020\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\056\011\017\020\006\001\001\000\010\002" +
    "\025\011\017\020\006\001\001\000\004\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\055\011" +
    "\017\020\006\001\001\000\010\002\054\011\017\020\006" +
    "\001\001\000\010\002\053\011\017\020\006\001\001\000" +
    "\010\002\052\011\017\020\006\001\001\000\010\002\051" +
    "\011\017\020\006\001\001\000\010\002\050\011\017\020" +
    "\006\001\001\000\010\002\047\011\017\020\006\001\001" +
    "\000\010\002\046\011\017\020\006\001\001\000\010\002" +
    "\045\011\017\020\006\001\001\000\010\002\044\011\017" +
    "\020\006\001\001\000\010\002\043\011\017\020\006\001" +
    "\001\000\010\002\042\011\017\020\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\062\005\064\011\017\020\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\115" +
    "\001\001\000\004\020\075\001\001\000\006\012\074\014" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\101\020\077\001\001\000\002\001\001\000\010\016" +
    "\106\017\107\020\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\112\001\001\000\002\001\001\000" +
    "\006\016\114\020\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\106\017\117\020\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\126\011\017" +
    "\020\006\001\001\000\004\020\123\001\001\000\002\001" +
    "\001\000\010\002\125\011\017\020\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\062\005\061\006" +
    "\130\011\017\020\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\136\001\001\000" +
    "\010\002\135\011\017\020\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\140\011\017\020\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\144\011\017\020\006\001\001\000\002\001" +
    "\001\000\010\002\146\011\017\020\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\151\011\017\020" +
    "\006\001\001\000\002\001\001\000\010\002\153\011\017" +
    "\020\006\001\001\000\002\001\001\000\010\002\155\011" +
    "\017\020\006\001\001\000\002\001\001\000\010\007\175" +
    "\010\174\020\173\001\001\000\010\002\167\011\017\020" +
    "\006\001\001\000\014\002\163\003\161\004\162\011\017" +
    "\020\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\163\003\165\011\017\020\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\172\011\017\020\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\200" +
    "\011\017\020\006\001\001\000\002\001\001\000\006\007" +
    "\202\020\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\205\011\017\020\006\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 static Symbo.Symbol sym(String s) {
	         return Symbo.Symbol.symbol(s);
	        }
	    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_fields ::= IDENTI COLON IDENTI COMMA type_fields 
            {
              FieldList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbo.Symbol i1 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i2 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FieldList(i1left,i1,i2,t);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_fields",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_fields ::= IDENTI COLON IDENTI 
            {
              FieldList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i1 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbo.Symbol i2 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FieldList(i1left,i1,i2,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_fields",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_fields_opt ::= type_fields 
            {
              FieldList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=t;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_fields_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_fields_opt ::= 
            {
              FieldList RESULT =null;
			RESULT=null;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_fields_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ARRAY OF IDENTI 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ArrayTy(ileft,i);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= LBRACE type_fields_opt RBRACE 
            {
              Ty RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new RecordTy(tleft,t);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= IDENTI 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new NameTy(ileft,i);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec ::= FUNCTION IDENTI LPAREN type_fields_opt RPAREN COLON IDENTI EQ expr 
            {
              Dec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Symbo.Symbol i1 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i2 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FunctionDec(i1left,i1,t,new NameTy(i2left,i2),e,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec ::= FUNCTION IDENTI LPAREN type_fields_opt RPAREN EQ expr 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FunctionDec(ileft,i,t,null,e,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec ::= VAR IDENTI COLON IDENTI ASSIGN expr 
            {
              Dec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbo.Symbol i1 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i2 = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new VarDec(i1left,i1,new NameTy(i2left,i2),e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec ::= VAR IDENTI ASSIGN expr 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new VarDec(ileft,i,null,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec ::= TYPE IDENTI EQ type 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new TypeDec(ileft,i,t,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_list ::= dec dec_list 
            {
              DecList RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList d2 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new DecList(d1,d2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_list ::= dec 
            {
              DecList RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new DecList(d1,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_list_opt ::= dec_list 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=d;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_list_opt ::= 
            {
              DecList RESULT =null;
			RESULT=null;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lvalue ::= IDENTI LBRACK expr RBRACK 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new SubscriptVar(ileft,new SimpleVar(ileft,i),e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lvalue ::= lvalue LBRACK expr RBRACK 
            {
              Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new SubscriptVar(lleft,l,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lvalue ::= lvalue DOT IDENTI 
            {
              Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FieldVar(lleft,l,i);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalue ::= IDENTI 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new SimpleVar(ileft,i);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_list ::= IDENTI EQ expr COMMA field_list 
            {
              FieldExpList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FieldExpList(ileft,i,e,f);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= IDENTI EQ expr 
            {
              FieldExpList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new FieldExpList(ileft,i,e,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_list_opt ::= field_list 
            {
              FieldExpList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=f;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list_opt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_list_opt ::= 
            {
              FieldExpList RESULT =null;
			RESULT=null;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list_opt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_list ::= expr COMMA expr_list 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList e2 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ExpList(e1,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ExpList(e,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list_opt ::= expr_list 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list_opt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list_opt ::= 
            {
              ExpList RESULT =null;
			RESULT=null;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list_opt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_seq ::= expr SEMICOLON expr_seq 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList e2 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ExpList(e1,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_seq ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ExpList(e,null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_seq_opt ::= expr_seq 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_seq_opt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_seq_opt ::= 
            {
              ExpList RESULT =null;
			RESULT=null;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_seq_opt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDENTI ::= ID 
            {
              Symbo.Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=sym(i);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LET dec_list_opt IN expr_seq_opt END 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new LetExp(dleft,d,new SeqExp(eleft,e));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= BREAK 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new BreakExp(bleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= FOR IDENTI ASSIGN expr TO expr DO expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ForExp(ileft,new VarDec(ileft,i,null,e1),e2,e3);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= WHILE expr DO expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new WhileExp(e1left,e1,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= IF expr THEN expr ELSE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new IfExp(e1left,e1,e2,e3);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= IF expr THEN expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new IfExp(e1left,e1,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= IDENTI LBRACK expr RBRACK OF expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new ArrayExp(ileft,i,e1,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= IDENTI LBRACE field_list_opt RBRACE 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new RecordExp(ileft,i,f);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LPAREN expr_seq_opt RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new SeqExp(eleft,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IDENTI LPAREN expr_list_opt RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbo.Symbol i = (Symbo.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT=new CallExp(ileft,i,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= lvalue ASSIGN expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new AssignExp(lleft,l,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr OR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new IfExp(e1left,e1,new IntExp(e1left,1),e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new IfExp(e1left,e1,e2,new IntExp(e2left,0));	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr GE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,9,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr GT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,8,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,7,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr LT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,6,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr NEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,5,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr EQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,4,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr DIVIDE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,3,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr TIMES expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,2,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,1,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(e1left,e1,0,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= MINUS expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new OpExp(eleft,new IntExp(eleft,0),1,e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= lvalue 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT=new VarExp(lleft,l);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NIL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT= new NilExp(nleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= INT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT= new IntExp(ileft,i);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT= new StringExp(sleft,s);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

